.data

newline:	.asciiz "\n"
seperator:	.asciiz "====================================="
intro:		.asciiz "Welcome to TNW, let's play a game"
input:		.asciiz "Do you want to play?"
play:		.asciiz "(1) Play"
exit:		.asciiz "(2) Quit"
guess:		.asciiz "Make your guess: "
win:		.asciiz " Congradulation! You won! The word is "
words:		.word	'S','m','a','r','t',
			'H','a','p','p','y',
			'L','u','c','k','y',
			'A','p','p','l','e',
			'C','l','o','u','d'
#word1:		.asciiz "smart"
#word2:		.asciiz "happy"
#word3:		.asciiz "lucky"
#word4:		.asciiz "apple"
#word5:		.asciiz "cloud"

lost:		.asciiz "Sorry, no more chances. You lose!"
r1:		.asciiz "["
r2:		.asciiz "]"
c1:		.asciiz "("
c2:		.asciiz ")"
end:		.asciiz "Thank you for playing!"
inputString:	.asciiz ""
.text
.globl main
array_element_address:
# C.1 goes here
	move	t2,a1
	move	t1,a0
	mul	t0,t2,20
	add	t0,t0,t1
	move	v0,t0
	jr	ra
array_whole_word:
	move	t2,a1
	move	t1,a0
	move	t3,a2
	mul	t0,t2,20
	mul	t3,t3,4
	add	t0,t0,t3
	add	t0,t0,t1
	move	v0,t0
	jr	ra
check_letter:
#for(int i = 0; i < inputString.length();i++)
#a0 = word
#a1 = userinput
	move	t2,a1
	move	t3,a0
	li	s0,0 #position counter for key
	li	s1,0 #position counter for user's input.
	li	s2,0 #counter for win or not
	li	s3,0 #counter for search miss
_outloop: #use 2 loop. outer loop for the user's input, inner for hthe key
	lbu	t0,(t2)
_innerloop:
	lw	t1,(t3)
	sub	t1,t1,t0
	bne	t1,zero,_notEqual
	bne	s0,s1,_notPosition
	la	a0,r1
	li	v0,1
	syscall
	lb	a0,(t1)
	li	v0,4
	syscall
	la	a0,r2
	li	v0,1
	syscall
	
	addi	s2,s2,1
	j	_continue
_notEqual:
	addi	s3,s3,1
	j	_continue
_notPosition:
	la	a0,c1
	li	v0,1
	syscall
	lb	a0,(t1)
	li	v0,4
	syscall
	la	a0,c2
	li	v0,1
	syscall
	j	_continue
	
_continue:
	addi	s1,s1,1
	addi	t3,t3,4
	ble	s1,4,_innerloop
	addi	s0,s0,1
	addi	t2,t2,1
	bne	s3,4,_exit
	lb	a0,(t1)
	li	v0,4
	syscall
_exit:
	ble	s0,4,_outloop
	move	v0,s2
	jr	ra


main:
_outLoop:
	la a0, seperator
	li v0, 4
	syscall
	
	la a0, newline
	li v0, 4
	syscall
	
	la a0, intro
	li v0, 4
	syscall
	
	la a0, newline
	li v0, 4
	syscall
	
	la a0, seperator
	li v0, 4
	syscall
	
	la a0, newline
	li v0, 4
	syscall
	
	la a0, input
	li v0, 4
	syscall
	
	la a0, newline
	li v0, 4
	syscall
	
	la a0, play
	li v0, 4
	syscall
	
	la a0, newline
	li v0, 4
	syscall
	
	la a0, exit
	li v0, 4
	syscall
	
	la a0, newline
	li v0, 4
	syscall
	
	li v0, 5 
 	syscall
 	move t0,v0
	bge t0, 2 ,_quit

	li 	v0, 42
	li 	a0, 0
	li 	a1, 5
	
	move	a1,v0
	la 	a0,words
	jal	array_element_address
	sw	v0,(s0) #store the address of the beginning of the string.

	lw	a0,(s0)
	li	v0,4
	syscall
_afterAssignWord:

	li 	v0, 4              
	la	a0, newline
	syscall
	
	
    	li t1, 0
_inner_loop:
_ask_input:
    	la 	a0, guess
	li 	v0, 4
	syscall
	
	li      v0, 8
    	la      a0, inputString
    	li      a1, 6
	syscall
	
	
	#lw	t0,(a0)
	
	li 	v0, 4              
	la	a0, newline
	
	syscall
	
	sw	a0,(s0)
	la	a1,inputString
	jal	check_letter
	move	v0,s0
	bne	s0,5,_keepGoing
	
	la	a0, newline
	li	v0, 4
	syscall
	
	la	a0, win
	li	v0, 4
	syscall
	
	la	a0, inputString
	li	v0, 4
	syscall	
	
	la	a0, newline
	li	v0, 4
	syscall
	
	j	_backUp
	#sw v0, (a0)
	#move	t0,a0
_keepGoing:	
    	addi	t1, t1, 1
    	ble	t1, 4, _inner_loop
_backUp:
    	j	_outLoop
  _quit:
  	la	a0, end
	li	v0, 4
	syscall
  	li	v0, 10          
    	syscall
